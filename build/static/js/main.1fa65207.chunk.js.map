{"version":3,"sources":["javascript/Dashboard.js","javascript/ViewArticle.js","javascript/App.js","registerServiceWorker.js","index.js"],"names":["Dashboard","state","articles","fetch","then","res","json","setState","className","this","map","e1","to","pathname","url","idx","key","day","month","title","preview","React","Component","ViewArticle","article","Number","props","location","undefined","dangerouslySetInnerHTML","__html","body","App","src","border","alt","exact","path","component","id","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1fa65207.chunk.js","sourcesContent":["import React from 'react'; \r\nimport './../css/Dashboard.css';\r\nimport {Link} from 'react-router-dom';\r\n// load backEnd connection, receive articles for dashboard page\r\n//const backEnd = require(\"./../packages/backEnd\");\r\n//var back = new backEnd.backEnd();\r\n//back.setElements(); // currently only used to initialize the mock articles\r\n//back.setConnection();\r\n//var articles = back.getElements();\r\n// React App to generate html with our data\r\nexport default class Dashboard extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      articles:[]\r\n    }\r\n  \r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('/api')\r\n      .then(res => res.json())\r\n      .then(articles => this.setState({articles}));\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n          <div className=\"gallery\">\r\n            {\r\n\r\n              this.state.articles.map(e1 =>                \r\n                <Link to={{\r\n                  pathname:e1.url,\r\n                  state: {\r\n                    idx:e1.idx\r\n                  }\r\n\r\n\r\n                }} key={e1.idx}>              \r\n                <div className=\"article-display-container\" > \r\n                  <div className=\"article-display-img\">\r\n                    <div className=\"date\">\r\n                      <div className=\"day\"> {e1.day}</div>\r\n                      <div className=\"month\">{e1.month}</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"article-display-card\"> \r\n                    <h2> {e1.title}</h2><br></br> \r\n                    <div className=\"article-preview\"> {e1.preview} </div>                     \r\n                  </div> \r\n                </div>               \r\n              </Link>\r\n            )    \r\n          }\r\n          </div>\r\n          <footer className=\"App-footer\">\r\n            </footer>\r\n          </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './../css/ViewArticle.css';\r\n//const backEnd = require(\"./../packages/backEnd\");\r\n//var back = new backEnd.backEnd();\r\n//back.setElements(); // currently only used to initialize the mock articles\r\n//var articles = back.getElements();\r\n//var index;\r\n// React App to generate html with our data\r\n// TODO: set max columns to 3 \r\nexport default class ViewArticle extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n        \tarticles: [],\r\n        \tarticle:[],\r\n        \tidx:Number\r\n        }\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n  \tthis.setState({idx:this.props.location.state.idx});\r\n  \t\r\n    fetch('/api')\r\n      .then(res => res.json())\r\n      .then(articles => this.setState({articles}));\r\n\r\n  }\r\n\r\n\r\n  render(){  \r\n  \tvar article;\r\n  \t\r\n  \tarticle = this.state.articles[this.props.location.state.idx]\r\n    //index = this.state.articles.findIndex(x => \"/\"+x.url === this.props.location.pathname)    \r\n\t    \r\n    if (article !== undefined){\r\n\t    return (<div className=\"container\">\r\n\t            <div className=\"return\">logo to return</div>\r\n\t            \r\n\t            {<div className=\"artice\" key={article.url} dangerouslySetInnerHTML={{__html:article.body}}></div>\r\n\t            }\r\n\t            </div>\r\n\t    );\r\n\t}\r\n\telse{\r\n\t\treturn(<div></div>);\r\n\r\n\t}\r\n  }\r\n}","import React from 'react';\r\nimport './../css/App.css'; \r\nimport Dashboard from './Dashboard'\r\nimport ViewArticle from './ViewArticle'\r\nimport {Route, Link} from 'react-router-dom';\r\n// React App to generate html with our dat\r\n//\r\nexport default class App extends React.Component{\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n           <img src=\"https://vividtheory.blob.core.windows.net/assignment/vtlogo.svg\"  border=\"0\" className=\"App-logo\" alt=\"logo\" />    \r\n          <Link to=\"/\" > \r\n            <div className=\"neumorphism\"> \r\n            </div>\r\n          </Link>\r\n          <p>\r\n            Vivid Theory\r\n          </p> \r\n        </header>\r\n        <Route exact path=\"/\" component={()=> <Dashboard id={123}/>}/>\r\n        <Route  path=\"/Article\" key=\"Article\" component={ViewArticle}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './javascript/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n\t<BrowserRouter>\r\n\t<App />\r\n\t</BrowserRouter>\r\n\t, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}